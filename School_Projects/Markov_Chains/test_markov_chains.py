#test_markov_chains.py
"""A file for unit testing markov_chains.py"""

import pytest
import markov_chains as MC
import numpy as np

def test_random_chain():
    """A function to make sure that the transition matrix returned by random_chain() has 
    columns that sum to 1."""
    #Set tolerance for error
    tol = 1e-12
    for i in range(1,6):
        M = MC.random_chain(i)
        for j in range(i):
            assert sum(M[:,j]) - 1 < tol, "failed on columns summing to 1"

def test_steady_state():
    """A function for testing the steady_state function. Also validates the results of 
    forecast() and four_state_forecast()."""
    #Set tolerance for error
    tol = 1e-6
    for n in range(1,6):
        #Make a random transition matrix and it's steady state distribution
        A = MC.random_chain(n)
        x = MC.steady_state(A)
        #Compare x and Ax
        x_new = A@x
        for i in range(n):
            assert x_new[i] - x[i] < tol, "failed on Ax = x"
        #Verify that the columns of A^k approach x as k approaches infinity
        Ak = np.linalg.matrix_power(A,20)
        for i in range(n):
            for j in range(n):
                assert Ak[i,j] - x[i] < tol, "failed on A^k approaches x column-wise"

def test_forecast():
    """Tests the forecast() function with respect to the steady_state() function."""
    #Set tolerance for error
    tol = 1e-2
    transition = np.array([[0.7, 0.6], [0.3, 0.4]])
    x = MC.steady_state(transition)
    fcast = MC.forecast(int(1e5))
    assert fcast.count(0)/len(fcast) - x[0] < tol, "failed on ratio of hot days"
    assert fcast.count(1)/len(fcast) - x[1] < tol, "failed on ratio of cold days"

def test_four_state_forecast():
    """Tests the four_state_forecast() function with respect to the steady_state() 
    function."""
    #Set tolerance for error
    tol = 1e-2
    transition = np.array([[0.5,0.3,0.1,0],[0.3,0.3,0.3,0.3],[0.2,0.3,0.4,0.5],[0,0.1,0.2,0.2]])
    x = MC.steady_state(transition)
    fcast = MC.four_state_forecast(int(1e5))
    assert fcast.count(0)/len(fcast) - x[0] < tol, "failed on ratio of hot days"
    assert fcast.count(1)/len(fcast) - x[1] < tol, "failed on ratio of mild days"
    assert fcast.count(2)/len(fcast) - x[2] < tol, "failed on ratio of cold days"
    assert fcast.count(3)/len(fcast) - x[3] < tol, "failed on ratio of freezing days"
    
def test_init():
    """Verifies that the transition matrix generated by the SentenceGenerator class 
    has columns that each sum to 1."""
    tol = 1e-12
    SG = MC.SentenceGenerator("yoda.txt")
    for j in range(len(SG.transition)):
        assert sum(SG.transition[:,j]) - 1 < tol, "failed on columns summing to 1"
